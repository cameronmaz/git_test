import React, { useState, useRef, useEffect } from ‘react’;
import { Palette, Brush, Eraser, Download, RotateCcw, Volume2, Book, Sparkles, ArrowLeft, ArrowRight, Mic, MicOff, RefreshCw, Check, Circle, AlertCircle } from ‘lucide-react’;

// 🔑 ADD YOUR OPENAI API KEY HERE (OPTION 1 - Hardcode for production)
// 1. Go to platform.openai.com
// 🔧 OR use the “Settings” button in the app for testing (OPTION 2)
const OPENAI_API_KEY = '';

const KidsColoringApp = () => {
const canvasRef = useRef(null);
const [currentScreen, setCurrentScreen] = useState(‘home’);
const [isDrawing, setIsDrawing] = useState(false);
const [currentTool, setCurrentTool] = useState(‘brush’);
const [currentColor, setCurrentColor] = useState(’#ff6b6b’);
const [brushSize, setBrushSize] = useState(8);
const [prompt, setPrompt] = useState(’’);
const [selectedMode, setSelectedMode] = useState(’’);
const [selectedTheme, setSelectedTheme] = useState(’’);
const [selectedStyle, setSelectedStyle] = useState(’’);
const [currentPage, setCurrentPage] = useState(null);
const [generatedPages, setGeneratedPages] = useState([]);
const [selectedPageIndex, setSelectedPageIndex] = useState(0);
const [story, setStory] = useState(’’);
const [showStory, setShowStory] = useState(false);
const [toddlerMode, setToddlerMode] = useState(false);
const [isListening, setIsListening] = useState(false);
const [isFinished, setIsFinished] = useState(false);

// OpenAI API Integration
const [isGenerating, setIsGenerating] = useState(false);
const [generationError, setGenerationError] = useState(null);
const useAI = OPENAI_API_KEY && OPENAI_API_KEY !== ‘your-api-key-here’;

const colors = [
‘#ff6b6b’, ‘#4ecdc4’, ‘#45b7d1’, ‘#96ceb4’, ‘#ffeaa7’,
‘#dda0dd’, ‘#ff9ff3’, ‘#54a0ff’, ‘#5f27cd’, ‘#00d2d3’,
‘#ff9f43’, ‘#ee5a24’, ‘#0abde3’, ‘#10ac84’, ‘#222f3e’
];

const themes = [
{ id: ‘animals’, name: ‘Animals’, icon: ‘🦁’, desc: ‘Lions, elephants, and more!’ },
{ id: ‘fairy-tales’, name: ‘Fairy Tales’, icon: ‘🏰’, desc: ‘Castles, princesses, and magic!’ },
{ id: ‘space’, name: ‘Space’, icon: ‘🚀’, desc: ‘Rockets, planets, and aliens!’ },
{ id: ‘nature’, name: ‘Nature’, icon: ‘🌳’, desc: ‘Trees, flowers, and gardens!’ },
{ id: ‘vehicles’, name: ‘Vehicles’, icon: ‘🚗’, desc: ‘Cars, trains, and planes!’ },
{ id: ‘underwater’, name: ‘Underwater’, icon: ‘🐠’, desc: ‘Fish, coral, and mermaids!’ }
];

const styles = [
{ id: ‘cartoon’, name: ‘Cartoon’, icon: ‘😊’, desc: ‘Fun and colorful!’ },
{ id: ‘line-art’, name: ‘Line Art’, icon: ‘✏️’, desc: ‘Clean and simple!’ },
{ id: ‘simple’, name: ‘Simple Shapes’, icon: ‘⭕’, desc: ‘Perfect for toddlers!’ }
];

const samplePages = {
‘animals-cartoon’: ‘<svg viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><circle cx="200" cy="120" r="50" fill="none" stroke="black" stroke-width="3"/><circle cx="180" cy="110" r="8" fill="none" stroke="black" stroke-width="2"/><circle cx="220" cy="110" r="8" fill="none" stroke="black" stroke-width="2"/><circle cx="175" cy="105" r="3" fill="black"/><circle cx="225" cy="105" r="3" fill="black"/><ellipse cx="200" cy="130" rx="6" ry="4" fill="none" stroke="black" stroke-width="2"/><ellipse cx="160" cy="80" rx="15" ry="25" fill="none" stroke="black" stroke-width="3"/><ellipse cx="240" cy="80" rx="15" ry="25" fill="none" stroke="black" stroke-width="3"/><ellipse cx="200" cy="200" rx="40" ry="60" fill="none" stroke="black" stroke-width="3"/><ellipse cx="170" cy="240" rx="8" ry="20" fill="none" stroke="black" stroke-width="3"/><ellipse cx="190" cy="245" rx="8" ry="20" fill="none" stroke="black" stroke-width="3"/><ellipse cx="210" cy="245" rx="8" ry="20" fill="none" stroke="black" stroke-width="3"/><ellipse cx="230" cy="240" rx="8" ry="20" fill="none" stroke="black" stroke-width="3"/></svg>’,
‘space-cartoon’: ‘<svg viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><ellipse cx="200" cy="50" rx="15" ry="30" fill="none" stroke="black" stroke-width="3"/><rect x="185" y="80" width="30" height="120" fill="none" stroke="black" stroke-width="3"/><path d="M185 200 L170 230 L185 220 Z" fill="none" stroke="black" stroke-width="3"/><path d="M215 200 L230 230 L215 220 Z" fill="none" stroke="black" stroke-width="3"/><circle cx="200" cy="120" r="12" fill="none" stroke="black" stroke-width="3"/><circle cx="200" cy="150" r="12" fill="none" stroke="black" stroke-width="3"/><circle cx="80" cy="80" r="15" fill="none" stroke="black" stroke-width="3"/><circle cx="320" cy="90" r="12" fill="none" stroke="black" stroke-width="3"/><circle cx="100" cy="40" r="8" fill="none" stroke="black" stroke-width="2"/><circle cx="300" cy="45" r="10" fill="none" stroke="black" stroke-width="2"/></svg>’,
‘fairy-tales-cartoon’: ‘<svg viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><rect x="150" y="180" width="100" height="80" fill="none" stroke="black" stroke-width="3"/><path d="M150 180 L200 120 L250 180 Z" fill="none" stroke="black" stroke-width="3"/><rect x="180" y="220" width="20" height="40" fill="none" stroke="black" stroke-width="2"/><circle cx="190" cy="200" r="3" fill="black"/><rect x="160" y="200" width="15" height="15" fill="none" stroke="black" stroke-width="2"/><rect x="225" y="200" width="15" height="15" fill="none" stroke="black" stroke-width="2"/><path d="M50 50 Q100 30 150 50 Q200 30 250 50 Q300 30 350 50" fill="none" stroke="black" stroke-width="4"/><circle cx="80" cy="70" r="4" fill="black"/><circle cx="120" cy="60" r="3" fill="black"/><circle cx="280" cy="65" r="4" fill="black"/><circle cx="320" cy="55" r="3" fill="black"/></svg>’
};

// OpenAI API Functions
const buildColoringPrompt = (userPrompt, theme, style) => {
const styleMap = {
‘cartoon’: ‘cartoon style, simple shapes, bold outlines, child-friendly’,
‘line-art’: ‘detailed line art, intricate patterns, medium complexity’,
‘simple’: ‘very simple shapes, thick lines, toddler-friendly, minimal detail’
};

```
const themeMap = {
  'animals': 'cute friendly animals',
  'space': 'rockets, planets, stars, astronauts',
  'fairy-tales': 'castles, princesses, dragons, magical elements',
  'nature': 'trees, flowers, butterflies, landscapes',
  'vehicles': 'cars, trucks, trains, airplanes',
  'underwater': 'fish, seahorses, coral, mermaids'
};

const complexityLevel = toddlerMode ? 'very simple, thick black lines, basic shapes' : 'moderate detail, clear outlines';

return `${userPrompt} featuring ${themeMap[theme]}, ${styleMap[style]}, black and white line drawing, coloring book page, simple clean outlines, no fill, no shading, white background, ${complexityLevel}, suitable for children ages 3-12, perfect for coloring`;
```

};

const generateColoringPage = async (coloringPrompt) => {
try {
console.log(‘🎨 Generating coloring page with prompt:’, coloringPrompt);
console.log(‘🔑 Using API key:’, OPENAI_API_KEY ? `${OPENAI_API_KEY.substring(0, 10)}...` : ‘None’);

```
  const response = await fetch('https://api.openai.com/v1/images/generations', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${OPENAI_API_KEY}`
    },
    body: JSON.stringify({
      model: "dall-e-3",
      prompt: coloringPrompt,
      size: "1024x1024",
      quality: "standard",
      n: 1,
      style: "natural"
    })
  });

  console.log('📡 API Response status:', response.status);

  if (!response.ok) {
    const errorText = await response.text();
    console.error('❌ API Error:', errorText);
    
    let errorMessage;
    try {
      const errorData = JSON.parse(errorText);
      errorMessage = errorData.error?.message || 'Unknown API error';
    } catch {
      errorMessage = `HTTP ${response.status}: ${errorText}`;
    }
    
    // Handle specific error types
    if (response.status === 401) {
      errorMessage = 'Invalid API key. Please check your OpenAI API key in the code.';
    } else if (response.status === 429) {
      errorMessage = 'Rate limit exceeded. Please try again in a moment.';
    } else if (response.status === 0 || errorMessage.includes('CORS')) {
      errorMessage = 'CORS Error: Direct browser calls to OpenAI API are blocked. Deploy to a server to test.';
    }
    
    throw new Error(errorMessage);
  }

  const data = await response.json();
  console.log('✅ Successfully generated image');
  return data.data[0].url;
} catch (error) {
  console.error('🚨 Generation Error:', error);
  
  // Check if it's a network/CORS error
  if (error.message.includes('Failed to fetch') || error.name === 'TypeError') {
    throw new Error('CORS Error: Cannot make direct API calls from browser. Deploy to server to test AI functionality.');
  }
  
  throw error;
}
```

};

const generateStoryFromPrompt = async (userPrompt, theme) => {
try {
console.log(‘📖 Generating story for:’, userPrompt, ‘Theme:’, theme);

```
  const storyPrompt = `Write a short, fun children's story (2-3 sentences) about ${userPrompt} with a ${theme} theme. Make it magical, positive, and engaging for kids aged 3-8.`;
  
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${OPENAI_API_KEY}`
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are a creative children's story writer. Write short, magical stories that inspire imagination and creativity."
        },
        {
          role: "user", 
          content: storyPrompt
        }
      ],
      max_tokens: 150,
      temperature: 0.8
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('❌ Story API Error:', errorText);
    throw new Error('Story generation failed');
  }

  const data = await response.json();
  console.log('✅ Successfully generated story');
  return data.choices[0].message.content;
} catch (error) {
  console.error('🚨 Story Generation Error:', error);
  return null;
}
```

};

// Navigation functions
const goToScreen = (screen) => {
setCurrentScreen(screen);
};

const handleModeSelect = (mode) => {
setSelectedMode(mode);
if (mode === ‘random’) {
const randomTheme = themes[Math.floor(Math.random() * themes.length)].id;
const randomStyle = styles[Math.floor(Math.random() * styles.length)].id;
setSelectedTheme(randomTheme);
setSelectedStyle(randomStyle);
startGeneration();
} else if (mode === ‘book’) {
setSelectedTheme(‘fairy-tales’);
setSelectedStyle(‘cartoon’);
startGeneration();
} else {
goToScreen(‘prompt’);
}
};

const handlePromptSubmit = () => {
if (prompt.trim()) {
goToScreen(‘style’);
}
};

const handleStyleSubmit = () => {
if (selectedStyle && selectedTheme) {
startGeneration();
}
};

const startGeneration = async () => {
goToScreen(‘generate’);
setIsGenerating(true);
setGenerationError(null);

```
try {
  if (useAI) {
    // Use OpenAI API
    const coloringPrompt = buildColoringPrompt(
      prompt || `${selectedTheme} themed coloring page`, 
      selectedTheme, 
      selectedStyle
    );
    
    console.log('Generating with prompt:', coloringPrompt);
    const imageUrl = await generateColoringPage(coloringPrompt);
    
    // Create image element to use as coloring page background
    const imageElement = `<img src="${imageUrl}" alt="Generated coloring page" style="width: 100%; height: 100%; object-fit: contain;" />`;
    setGeneratedPages([imageElement]);
  } else {
    // Fallback to sample pages
    const key = selectedTheme + '-' + selectedStyle;
    const page = samplePages[key] || samplePages['animals-cartoon'];
    setGeneratedPages([page]);
  }
  
  setSelectedPageIndex(0);
  setTimeout(() => {
    setIsGenerating(false);
    goToScreen('review');
  }, 1000);
  
} catch (error) {
  console.error('Generation failed:', error);
  setGenerationError(error.message);
  
  // Fallback to sample pages on error
  const key = selectedTheme + '-' + selectedStyle;
  const page = samplePages[key] || samplePages['animals-cartoon'];
  setGeneratedPages([page]);
  setSelectedPageIndex(0);
  
  setTimeout(() => {
    setIsGenerating(false);
    goToScreen('review');
  }, 1000);
}
```

};

const confirmPage = () => {
setCurrentPage(generatedPages[selectedPageIndex]);
setIsFinished(false);
goToScreen(‘canvas’);
};

const toggleVoiceInput = () => {
setIsListening(!isListening);
if (!isListening) {
setTimeout(() => {
setPrompt(“a friendly dragon with a rainbow”);
setIsListening(false);
}, 2000);
}
};

// Canvas functions
const startDrawing = (e) => {
if (!canvasRef.current) return;
setIsDrawing(true);
draw(e);
};

const draw = (e) => {
if (!isDrawing || !canvasRef.current) return;

```
const canvas = canvasRef.current;
const ctx = canvas.getContext('2d');
const rect = canvas.getBoundingClientRect();
const x = (e.clientX - rect.left) * (canvas.width / rect.width);
const y = (e.clientY - rect.top) * (canvas.height / rect.height);

ctx.globalCompositeOperation = currentTool === 'eraser' ? 'destination-out' : 'source-over';
ctx.strokeStyle = currentColor;
ctx.lineWidth = toddlerMode ? Math.max(brushSize, 15) : brushSize;

ctx.lineTo(x, y);
ctx.stroke();
ctx.beginPath();
ctx.moveTo(x, y);
```

};

const stopDrawing = () => {
setIsDrawing(false);
if (canvasRef.current) {
const ctx = canvasRef.current.getContext(‘2d’);
ctx.beginPath();
}
};

const clearCanvas = () => {
if (!canvasRef.current) return;
const canvas = canvasRef.current;
const ctx = canvas.getContext(‘2d’);
ctx.clearRect(0, 0, canvas.width, canvas.height);
};

const handleFillTool = (e) => {
if (!canvasRef.current) return;
const canvas = canvasRef.current;
const ctx = canvas.getContext(‘2d’);
const rect = canvas.getBoundingClientRect();
const x = (e.clientX - rect.left) * (canvas.width / rect.width);
const y = (e.clientY - rect.top) * (canvas.height / rect.height);
ctx.fillStyle = currentColor;
ctx.beginPath();
ctx.arc(x, y, toddlerMode ? 30 : 20, 0, 2 * Math.PI);
ctx.fill();
};

const addSticker = (sticker, e) => {
if (!canvasRef.current) return;
const canvas = canvasRef.current;
const ctx = canvas.getContext(‘2d’);
const rect = canvas.getBoundingClientRect();
const x = (e.clientX - rect.left) * (canvas.width / rect.width);
const y = (e.clientY - rect.top) * (canvas.height / rect.height);
ctx.font = (toddlerMode ? ‘40px’ : ‘30px’) + ’ Arial’;
ctx.fillText(sticker, x - 15, y + 15);
};

const saveArtwork = () => {
if (!canvasRef.current) return;
const canvas = canvasRef.current;
const link = document.createElement(‘a’);
link.download = ‘my-coloring-page.png’;
link.href = canvas.toDataURL();
link.click();
};

const finishColoring = () => {
setIsFinished(true);
};

const continueEditing = () => {
setIsFinished(false);
};

const generateStory = async () => {
if (useAI) {
try {
const aiStory = await generateStoryFromPrompt(
prompt || `${selectedTheme} adventure`,
selectedTheme
);
if (aiStory) {
setStory(aiStory);
setShowStory(true);
return;
}
} catch (error) {
console.error(‘Story generation failed:’, error);
}
}

```
// Fallback stories
const stories = {
  'animals': "Once there was a friendly animal who loved to play in colorful gardens. With your beautiful coloring, this creature came to life and went on amazing adventures through magical lands!",
  'space': "In a galaxy far, far away, brave explorers traveled between colorful planets. Your amazing artwork brought their spaceship to life for incredible cosmic adventures among the stars!",
  'fairy-tales': "In a magical kingdom filled with wonder, your beautiful coloring brought an enchanted story to life. Every color you chose added more magic to this fairy tale world!"
};
const themeStory = stories[selectedTheme] || stories['animals'];
setStory(themeStory);
setShowStory(true);
```

};

// Initialize canvas when we get to canvas screen
useEffect(() => {
if (currentScreen === ‘canvas’ && canvasRef.current) {
const ctx = canvasRef.current.getContext(‘2d’);
ctx.lineCap = ‘round’;
ctx.lineJoin = ‘round’;
}
}, [currentScreen]);

// Screen Components
const HomeScreen = () => (
<div className="min-h-screen bg-gradient-to-br from-purple-200 via-pink-200 to-blue-200 flex items-center justify-center p-4">
<div className="text-center max-w-2xl">
<div className="mb-8">
<div className="text-8xl mb-4">🎨</div>
<h1 className="text-6xl font-bold text-purple-800 mb-4 flex items-center justify-center gap-4">
<Sparkles className="text-pink-500" />
Creative Kids Studio
<Sparkles className="text-pink-500" />
</h1>
<p className="text-2xl text-purple-600 mb-4">Create, Color, and Tell Amazing Stories!</p>

```
      {/* AI Status */}
      <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium mb-6 ${
        useAI ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
      }`}>
        {useAI ? '🤖 AI Mode: Unlimited Creativity!' : '📚 Sample Mode: Add API key for AI!'}
      </div>
    </div>

    <div className="flex justify-center gap-4 mb-8">
      <button
        onClick={() => setToddlerMode(!toddlerMode)}
        className={`px-6 py-3 rounded-full font-bold text-white transition-all ${
          toddlerMode 
            ? 'bg-gradient-to-r from-pink-400 to-purple-400 scale-105' 
            : 'bg-gray-400 hover:bg-gray-500'
        }`}
      >
        {toddlerMode ? '🧸 Toddler Mode ON' : '👦 Big Kid Mode'}
      </button>
      
      <button
        onClick={() => setShowApiSettings(true)}
        className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-bold rounded-full hover:scale-105 transition-transform flex items-center gap-2"
      >
        <Settings size={20} />
        {useAI ? 'API Settings' : 'Enable AI'}
      </button>
    </div>

    <button
      onClick={() => goToScreen('choose')}
      className="px-12 py-6 bg-gradient-to-r from-pink-500 to-purple-600 text-white font-bold rounded-3xl text-2xl hover:scale-105 transition-transform shadow-2xl"
    >
      🚀 Start Creating!
    </button>
  </div>
  
  {showApiSettings && <ApiSettingsModal />}
</div>
```

);

const ChooseScreen = () => (
<div className="min-h-screen bg-gradient-to-br from-purple-200 via-pink-200 to-blue-200 p-4">
<div className="max-w-4xl mx-auto text-center">
<button
onClick={() => goToScreen(‘home’)}
className=“mb-6 flex items-center gap-2 text-purple-800 hover:text-purple-600 font-semibold text-lg”
>
<ArrowLeft /> Back to Home
</button>

```
    <h1 className="text-4xl font-bold text-purple-800 mb-4">How do you want to create?</h1>
    <p className="text-xl text-purple-600 mb-4">Choose your creative adventure!</p>
    
    {/* AI Status Banner */}
    {!useAI && (
      <div className="bg-yellow-50 border-2 border-yellow-200 rounded-xl p-4 mb-8 max-w-2xl mx-auto">
        <div className="flex items-center gap-2 text-yellow-800">
          <AlertCircle size={20} />
          <span className="font-semibold">Sample Mode:</span>
          <span>Add your OpenAI API key to the code and deploy to generate unlimited unique coloring pages!</span>
        </div>
      </div>
    )}

    <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
      <div
        onClick={() => handleModeSelect('random')}
        className="bg-white rounded-3xl p-8 shadow-xl hover:scale-105 transition-transform cursor-pointer border-4 border-transparent hover:border-yellow-400"
      >
        <div className="text-6xl mb-4">🎲</div>
        <h2 className="text-2xl font-bold text-purple-800 mb-2">Surprise Me!</h2>
        <p className="text-purple-600">Let {useAI ? 'AI' : 'us'} pick something magical for you to color!</p>
      </div>

      <div
        onClick={() => handleModeSelect('prompt')}
        className="bg-white rounded-3xl p-8 shadow-xl hover:scale-105 transition-transform cursor-pointer border-4 border-transparent hover:border-blue-400"
      >
        <div className="text-6xl mb-4">💭</div>
        <h2 className="text-2xl font-bold text-purple-800 mb-2">Tell Me What!</h2>
        <p className="text-purple-600">Describe what you want to color and {useAI ? 'AI will' : "we'll"} create it!</p>
      </div>

      <div
        onClick={() => handleModeSelect('book')}
        className="bg-white rounded-3xl p-8 shadow-xl hover:scale-105 transition-transform cursor-pointer border-4 border-transparent hover:border-green-400"
      >
        <div className="text-6xl mb-4">📚</div>
        <h2 className="text-2xl font-bold text-purple-800 mb-2">Story Book!</h2>
        <p className="text-purple-600">Create a whole coloring book with connected pages!</p>
      </div>
    </div>
  </div>
</div>
```

);

const PromptScreen = () => (
<div className="min-h-screen bg-gradient-to-br from-purple-200 via-pink-200 to-blue-200 p-4">
<div className="max-w-2xl mx-auto">
<button
onClick={() => goToScreen(‘choose’)}
className=“mb-6 flex items-center gap-2 text-purple-800 hover:text-purple-600 font-semibold text-lg”
>
<ArrowLeft /> Back
</button>

```
    <div className="bg-white rounded-3xl p-8 shadow-xl text-center">
      <h1 className="text-4xl font-bold text-purple-800 mb-4">What do you want to color?</h1>
      <p className="text-xl text-purple-600 mb-2">Tell us your ideas!</p>
      
      {useAI && (
        <p className="text-green-600 font-medium mb-6">🤖 AI will create a unique coloring page just for you!</p>
      )}

      <div className="space-y-6">
        <div className="relative">
          <input
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="A dragon flying over a rainbow castle..."
            className="w-full p-6 border-4 border-purple-200 rounded-2xl focus:border-purple-400 text-xl text-center"
            onKeyPress={(e) => e.key === 'Enter' && handlePromptSubmit()}
          />
        </div>

        <div className="flex justify-center gap-4">
          <button
            onClick={toggleVoiceInput}
            className={`px-6 py-4 rounded-2xl font-bold transition-all flex items-center gap-2 ${
              isListening 
                ? 'bg-red-500 text-white animate-pulse' 
                : 'bg-blue-500 hover:bg-blue-600 text-white'
            }`}
          >
            {isListening ? <MicOff /> : <Mic />}
            {isListening ? 'Listening...' : 'Speak It!'}
          </button>
        </div>

        <div className="text-left">
          <p className="text-purple-700 font-semibold mb-4">💡 Ideas to get you started:</p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {[
              "A friendly monster eating ice cream",
              "Unicorns playing in a flower garden",
              "Space cats flying rockets",
              "Underwater mermaid palace",
              "Dragons having a tea party",
              "Magical forest with talking trees"
            ].map(idea => (
              <button
                key={idea}
                onClick={() => setPrompt(idea)}
                className="p-3 bg-purple-100 hover:bg-purple-200 rounded-xl text-purple-700 text-left transition-colors"
              >
                {idea}
              </button>
            ))}
          </div>
        </div>

        <button
          onClick={handlePromptSubmit}
          disabled={!prompt.trim()}
          className="w-full py-6 bg-gradient-to-r from-pink-500 to-purple-600 text-white font-bold rounded-2xl text-xl hover:scale-105 transition-transform disabled:opacity-50"
        >
          Next: Choose Style! ✨
        </button>
      </div>
    </div>
  </div>
</div>
```

);

const StyleScreen = () => (
<div className="min-h-screen bg-gradient-to-br from-purple-200 via-pink-200 to-blue-200 p-4">
<div className="max-w-4xl mx-auto">
<button
onClick={() => goToScreen(‘prompt’)}
className=“mb-6 flex items-center gap-2 text-purple-800 hover:text-purple-600 font-semibold text-lg”
>
<ArrowLeft /> Back
</button>

```
    <div className="bg-white rounded-3xl p-8 shadow-xl">
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold text-purple-800 mb-2">Choose Your Style!</h1>
        <p className="text-xl text-purple-600">You want to color: <span className="font-bold">"{prompt}"</span></p>
        {useAI && (
          <p className="text-green-600 font-medium mt-2">🤖 AI will generate this exactly as you imagine it!</p>
        )}
      </div>

      <div className="space-y-8">
        <div>
          <h2 className="text-2xl font-bold text-purple-800 mb-4">🎨 Art Style</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {styles.map(style => (
              <button
                key={style.id}
                onClick={() => setSelectedStyle(style.id)}
                className={`p-6 rounded-2xl transition-all border-4 ${
                  selectedStyle === style.id
                    ? 'border-purple-500 bg-purple-100 scale-105'
                    : 'border-gray-200 bg-white hover:bg-gray-50'
                }`}
              >
                <div className="text-4xl mb-2">{style.icon}</div>
                <h3 className="font-bold text-purple-800">{style.name}</h3>
                <p className="text-purple-600 text-sm">{style.desc}</p>
              </button>
            ))}
          </div>
        </div>

        <div>
          <h2 className="text-2xl font-bold text-purple-800 mb-4">🌟 Theme</h2>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {themes.map(theme => (
              <button
                key={theme.id}
                onClick={() => setSelectedTheme(theme.id)}
                className={`p-4 rounded-2xl transition-all border-4 ${
                  selectedTheme === theme.id
                    ? 'border-purple-500 bg-purple-100 scale-105'
                    : 'border-gray-200 bg-white hover:bg-gray-50'
                }`}
              >
                <div className="text-3xl mb-1">{theme.icon}</div>
                <h3 className="font-bold text-purple-800 text-sm">{theme.name}</h3>
              </button>
            ))}
          </div>
        </div>

        <button
          onClick={handleStyleSubmit}
          disabled={!selectedStyle || !selectedTheme}
          className="w-full py-6 bg-gradient-to-r from-pink-500 to-purple-600 text-white font-bold rounded-2xl text-xl hover:scale-105 transition-transform disabled:opacity-50"
        >
          {useAI ? '🤖 Generate with AI!' : '🎨 Create My Coloring Page!'} 🚀
        </button>
      </div>
    </div>
  </div>
</div>
```

);

const GenerateScreen = () => (
<div className="min-h-screen bg-gradient-to-br from-purple-200 via-pink-200 to-blue-200 flex items-center justify-center p-4">
<div className="text-center">
<div className="bg-white rounded-3xl p-12 shadow-xl max-w-md">
<div className="animate-spin text-6xl mb-6">✨</div>
<h1 className="text-3xl font-bold text-purple-800 mb-4">
{useAI ? ‘AI Creating Magic!’ : ‘Creating Magic!’}
</h1>
<p className="text-purple-600 mb-6">
{selectedMode === ‘book’
? `${useAI ? 'AI is generating' : 'Generating'} your story book pages...`
: selectedMode === ‘random’
? `${useAI ? 'AI is picking' : 'Picking'} something amazing for you...`
: `${useAI ? 'AI is creating' : 'Creating'} your "${prompt}" coloring page...`
}
</p>

```
      {generationError && (
        <div className="bg-red-50 border-2 border-red-200 rounded-xl p-4 mb-4">
          <p className="text-red-700 text-sm font-semibold mb-2">⚠️ Generation Failed:</p>
          <p className="text-red-600 text-sm mb-3">{generationError}</p>
          
          {generationError.includes('CORS') && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mt-3">
              <p className="text-blue-800 text-sm font-semibold mb-2">🚀 Deploy to Test AI:</p>
              <ul className="text-blue-700 text-xs space-y-1">
                <li>• CORS prevents browser testing of OpenAI API</li>
                <li>• Deploy to Vercel, Netlify, or any server to test AI</li>
                <li>• Make sure your API key is in the code before deploying</li>
                <li>• For now, using sample coloring pages</li>
              </ul>
            </div>
          )}
          
          {generationError.includes('Invalid API key') && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mt-3">
              <p className="text-yellow-800 text-sm font-semibold mb-2">🔑 API Key Issues:</p>
              <ul className="text-yellow-700 text-xs space-y-1">
                <li>• Make sure your API key starts with "sk-"</li>
                <li>• Check that you have API credits in your OpenAI account</li>
                <li>• Verify the key is copied correctly in the code</li>
                <li>• Try generating a new API key at platform.openai.com</li>
              </ul>
            </div>
          )}
          
          <p className="text-red-600 text-xs mt-2">Using sample page instead</p>
        </div>
      )}
      
      <div className="w-full bg-purple-200 rounded-full h-4">
        <div className="bg-gradient-to-r from-pink-500 to-purple-600 h-4 rounded-full animate-pulse" style={{width: '70%'}}></div>
      </div>
    </div>
  </div>
</div>
```

);

const ReviewScreen = () => (
<div className="min-h-screen bg-gradient-to-br from-purple-200 via-pink-200 to-blue-200 p-4">
<div className="max-w-4xl mx-auto">
<div className="text-center mb-8">
<h1 className="text-4xl font-bold text-purple-800 mb-4">Your Coloring Page is Ready! 🎉</h1>
<p className="text-xl text-purple-600">Do you like it? Or should we make a new one?</p>
{useAI && !generationError && (
<p className="text-green-600 font-medium mt-2">🤖 Generated fresh by AI just for you!</p>
)}
{generationError && (
<p className="text-orange-600 font-medium mt-2">⚠️ AI generation failed, using sample page</p>
)}
</div>

```
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <div className="bg-white rounded-3xl p-6 shadow-xl">
        <h2 className="text-2xl font-bold text-purple-800 mb-4">Preview</h2>
        
        <div className="border-4 border-purple-200 rounded-xl bg-white p-4 min-h-64">
          {generatedPages[selectedPageIndex] && (
            <div dangerouslySetInnerHTML={{ __html: generatedPages[selectedPageIndex] }} />
          )}
        </div>
      </div>

      <div className="bg-white rounded-3xl p-6 shadow-xl">
        <h2 className="text-2xl font-bold text-purple-800 mb-6">What would you like to do?</h2>
        
        <div className="space-y-4">
          <button
            onClick={confirmPage}
            className="w-full py-6 bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold rounded-2xl text-xl hover:scale-105 transition-transform flex items-center justify-center gap-2"
          >
            <Check size={24} />
            Perfect! Let's Color This! 🎨
          </button>

          <button
            onClick={startGeneration}
            className="w-full py-6 bg-gradient-to-r from-yellow-400 to-orange-500 text-white font-bold rounded-2xl text-xl hover:scale-105 transition-transform flex items-center justify-center gap-2"
          >
            <RefreshCw size={24} />
            {useAI ? 'Generate Another with AI' : 'Make a Different One'} 🔄
          </button>

          <button
            onClick={() => goToScreen('style')}
            className="w-full py-4 bg-purple-100 hover:bg-purple-200 text-purple-700 font-bold rounded-2xl text-lg transition-colors"
          >
            Change Style or Theme
          </button>
        </div>

        <div className="mt-6 p-4 bg-yellow-50 rounded-xl">
          <h3 className="font-bold text-purple-800 mb-2">💡 Tips:</h3>
          <ul className="text-purple-700 text-sm space-y-1">
            <li>• {useAI ? 'Generate unlimited unique pages with AI!' : 'Add your API key for unlimited AI generations!'}</li>
            <li>• Each page is {useAI ? 'uniquely created' : 'carefully designed'} just for you</li>
            <li>• Try different styles and themes for variety</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>
```

);

const CanvasScreen = () => (
<div className="min-h-screen bg-gradient-to-br from-purple-200 via-pink-200 to-blue-200 p-4">
<div className="max-w-7xl mx-auto">
{!isFinished ? (
<>
<div className="flex justify-between items-center mb-6">
<button
onClick={() => goToScreen(‘review’)}
className=“flex items-center gap-2 text-purple-800 hover:text-purple-600 font-semibold text-lg”
>
<ArrowLeft /> Back to Review
</button>

```
          <div className="text-center">
            <h1 className="text-3xl font-bold text-purple-800">🎨 Coloring Time!</h1>
            <button
              onClick={() => setToddlerMode(!toddlerMode)}
              className={`mt-2 px-4 py-2 rounded-full font-bold text-white transition-all ${
                toddlerMode 
                  ? 'bg-gradient-to-r from-pink-400 to-purple-400' 
                  : 'bg-gray-400 hover:bg-gray-500'
              }`}
            >
              {toddlerMode ? '🧸 Toddler Mode' : '👦 Advanced Mode'}
            </button>
          </div>

          <button
            onClick={finishColoring}
            className="px-6 py-3 bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold rounded-xl hover:scale-105 transition-transform"
          >
            ✨ Finish!
          </button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-3 bg-white rounded-3xl p-6 shadow-xl">
            <div className="relative">
              {currentPage && (
                <div 
                  className="absolute inset-0 pointer-events-none opacity-30 p-4"
                  dangerouslySetInnerHTML={{ __html: currentPage }}
                />
              )}
              <canvas
                ref={canvasRef}
                width={500}
                height={375}
                className="w-full border-4 border-purple-200 rounded-xl cursor-crosshair bg-white relative z-10"
                onMouseDown={currentTool === 'fill' ? handleFillTool : startDrawing}
                onMouseMove={draw}
                onMouseUp={stopDrawing}
                onMouseLeave={stopDrawing}
              />
            </div>

            <div className="mt-4 flex justify-center gap-4">
              <button
                onClick={clearCanvas}
                className="px-4 py-2 bg-red-100 hover:bg-red-200 text-red-700 rounded-lg font-medium flex items-center gap-2"
              >
                <RotateCcw size={16} />
                Clear All
              </button>
            </div>
          </div>

          <div className="bg-white rounded-3xl p-6 shadow-xl">
            <h2 className="text-2xl font-bold text-purple-800 mb-4 flex items-center gap-2">
              <Palette /> {toddlerMode ? '🎨 Tools' : 'Art Tools'}
            </h2>

            <div className="space-y-6">
              <div>
                <label className="block text-purple-700 font-semibold mb-3">
                  {toddlerMode ? '🖌️ Paint' : 'Tools'}
                </label>
                <div className="grid gap-3 grid-cols-1">
                  {[
                    { id: 'brush', icon: Brush, label: toddlerMode ? '🖌️ Paint' : 'Paint Brush' },
                    { id: 'eraser', icon: Eraser, label: toddlerMode ? '🧽 Erase' : 'Eraser' },
                    { id: 'fill', icon: Circle, label: toddlerMode ? '🪣 Fill' : 'Fill Tool' }
                  ].map(tool => (
                    <button
                      key={tool.id}
                      onClick={() => setCurrentTool(tool.id)}
                      className={`p-4 rounded-xl font-medium transition-all flex items-center gap-3 text-lg ${
                        currentTool === tool.id
                          ? 'bg-purple-500 text-white scale-105'
                          : 'bg-purple-100 text-purple-700 hover:bg-purple-200'
                      }`}
                    >
                      <tool.icon size={toddlerMode ? 24 : 20} />
                      {tool.label}
                    </button>
                  ))}
                </div>
              </div>

              {!toddlerMode && (
                <div>
                  <label className="block text-purple-700 font-semibold mb-3">
                    Brush Size: {brushSize}
                  </label>
                  <input
                    type="range"
                    min="2"
                    max="25"
                    value={brushSize}
                    onChange={(e) => setBrushSize(Number(e.target.value))}
                    className="w-full"
                  />
                  <div className="flex justify-between text-sm text-purple-600 mt-1">
                    <span>Thin</span>
                    <span>Thick</span>
                  </div>
                </div>
              )}

              <div>
                <label className="block text-purple-700 font-semibold mb-3">
                  {toddlerMode ? '🌈 Colors' : 'Colors'}
                </label>
                <div className={`grid gap-3 ${toddlerMode ? 'grid-cols-3' : 'grid-cols-4'}`}>
                  {colors.slice(0, toddlerMode ? 9 : colors.length).map(color => (
                    <button
                      key={color}
                      onClick={() => setCurrentColor(color)}
                      className={`aspect-square rounded-xl border-4 transition-transform hover:scale-110 ${
                        currentColor === color ? 'border-purple-800 scale-110 shadow-lg' : 'border-gray-300'
                      } ${toddlerMode ? 'h-16' : 'h-12'}`}
                      style={{ backgroundColor: color }}
                    />
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-purple-700 font-semibold mb-3">
                  {toddlerMode ? '✨ Stickers' : 'Fun Stickers'}
                </label>
                <div className={`grid gap-2 ${toddlerMode ? 'grid-cols-3' : 'grid-cols-4'}`}>
                  {['⭐', '❤️', '🌈', '🦄', '🎈', '🌸', '🍭', '😊'].map(sticker => (
                    <button
                      key={sticker}
                      onClick={(e) => addSticker(sticker, e)}
                      className={`rounded-lg hover:scale-110 transition-transform bg-yellow-100 hover:bg-yellow-200 ${
                        toddlerMode ? 'p-4 text-3xl' : 'p-3 text-2xl'
                      }`}
                    >
                      {sticker}
                    </button>
                  ))}
                </div>
              </div>

              <div className="bg-gradient-to-r from-yellow-100 to-orange-100 p-4 rounded-xl">
                <h3 className="font-bold text-orange-800 mb-2">🎨 Keep Going!</h3>
                <p className="text-sm text-orange-700 mb-2">
                  {toddlerMode 
                    ? "You're doing great! Add more colors!" 
                    : "Looking amazing! Try adding some stickers or different colors!"
                  }
                </p>
                <div className="w-full bg-orange-200 rounded-full h-3">
                  <div className="bg-orange-500 h-3 rounded-full transition-all duration-500" style={{width: '70%'}}></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </>
    ) : (
      <div className="text-center">
        <div className="bg-white rounded-3xl p-8 shadow-xl max-w-2xl mx-auto">
          <div className="text-6xl mb-4">🎉</div>
          <h1 className="text-4xl font-bold text-purple-800 mb-4">Amazing Work!</h1>
          <p className="text-xl text-purple-600 mb-8">Your coloring page looks fantastic!</p>

          <div className="relative mb-8 max-w-md mx-auto">
            <div className="border-4 border-purple-200 rounded-xl bg-white p-4 h-64">
              {currentPage && (
                <div 
                  className="opacity-30 h-full"
                  dangerouslySetInnerHTML={{ __html: currentPage }}
                />
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <button
              onClick={saveArtwork}
              className="p-6 bg-gradient-to-r from-green-400 to-blue-500 text-white font-bold rounded-2xl hover:scale-105 transition-transform"
            >
              <Download size={24} className="mx-auto mb-2" />
              Save My Art
            </button>

            <button
              onClick={generateStory}
              className="p-6 bg-gradient-to-r from-pink-400 to-purple-500 text-white font-bold rounded-2xl hover:scale-105 transition-transform"
            >
              <Book size={24} className="mx-auto mb-2" />
              {useAI ? 'AI Story' : 'Create Story'}
            </button>

            <button
              onClick={continueEditing}
              className="p-6 bg-gradient-to-r from-yellow-400 to-orange-500 text-white font-bold rounded-2xl hover:scale-105 transition-transform"
            >
              <Brush size={24} className="mx-auto mb-2" />
              Keep Coloring
            </button>
          </div>

          {showStory && (
            <div className="mt-6 p-6 bg-yellow-50 border-4 border-yellow-200 rounded-xl text-left">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-xl font-bold text-purple-800">📚 Your Story:</h3>
                <div className="flex items-center gap-2">
                  {useAI && <span className="text-sm text-green-600 font-medium">🤖 AI Generated</span>}
                  <button className="text-purple-600 hover:text-purple-800 flex items-center gap-1">
                    <Volume2 size={20} />
                    <span className="text-sm">Listen</span>
                  </button>
                </div>
              </div>
              <p className="text-purple-700 leading-relaxed text-lg mb-4">{story}</p>
              <div className="flex gap-3 justify-center">
                <button className="px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg font-medium">
                  📧 Share Story
                </button>
                <button className="px-4 py-2 bg-green-100 hover:bg-green-200 text-green-700 rounded-lg font-medium">
                  📖 Save to Library
                </button>
                <button className="px-4 py-2 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-lg font-medium">
                  🎬 Make Video
                </button>
              </div>
            </div>
          )}

          <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              onClick={() => goToScreen('choose')}
              className="p-4 bg-purple-100 hover:bg-purple-200 text-purple-700 rounded-xl font-medium"
            >
              🎨 Create Another Page
            </button>
            <button
              onClick={() => goToScreen('home')}
              className="p-4 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl font-medium"
            >
              🏠 Back to Home
            </button>
          </div>
        </div>
      </div>
    )}
  </div>
</div>
```

);

const renderCurrentScreen = () => {
switch (currentScreen) {
case ‘home’: return <HomeScreen />;
case ‘choose’: return <ChooseScreen />;
case ‘prompt’: return <PromptScreen />;
case ‘style’: return <StyleScreen />;
case ‘generate’: return <GenerateScreen />;
case ‘review’: return <ReviewScreen />;
case ‘canvas’: return <CanvasScreen />;
default: return <HomeScreen />;
}
};

return renderCurrentScreen();
};

export default KidsColoringApp;